"use strict";(self.webpackChunkportfolio_frontend=self.webpackChunkportfolio_frontend||[]).push([[728],{4728:(g,s,t)=>{t.r(s),t.d(s,{RustProjectsComponent:()=>a});var r=t(8470),l=t(9401),o=t(3712),i=t(5804),c=t(3101),e=t(4641);class a{static#e=this.\u0275fac=function(n){return new(n||a)};static#t=this.\u0275cmp=e.Xpm({type:a,selectors:[["app-rust-projects"]],standalone:!0,features:[e.jDz,e.zW0([o.H_,o.Zi])],decls:42,vars:0,consts:[[1,"flex","justify-between","border-b","py-1","border-normal"],[1,"text-6xl"],["icon","rust",1,"h-full","w-20","aspect-square","dark:invert"],[1,"grid","grid-cols-1","gap-y-8","my-4"],["ngxLinkedElement","personal-blog"],[1,"text-normal","text-3xl"],[1,"font-normal","italic"],[1,"flex","justify-center","my-2"],[1,"w-fit","h-min","max-w-[20rem]"],["src","/assets/blog-preview.png","alt","blog preview",1,"object-cover"],["onHover","",1,"flex","gap-x-2"],["repoName","actix-blog"],["target","_blank","href","https://www.jeshuahinostroza.com",1,"group","w-max"],["icon","globe",1,"h-4","w-4","inline-block","mr-1","invert"],[1,"text-white","group-hover:underline"],[1,"flex","gap-x-2"],["ngxLinkedElement","code-conjurer"],["repoName","code-conjurer"]],template:function(n,u){1&n&&(e.TgZ(0,"header",0)(1,"h3",1),e._uU(2,"Rust"),e.qZA(),e._UZ(3,"app-svg-icon",2),e.qZA(),e.TgZ(4,"div",3)(5,"article",4)(6,"h1",5),e._uU(7,"Personal Blog"),e.qZA(),e.TgZ(8,"h2",6),e._uU(9,"Server, december 2023"),e.qZA(),e.TgZ(10,"p"),e._uU(11,"My personal blog! I am very proud of it."),e.qZA(),e.TgZ(12,"p"),e._uU(13," Its a basic rust server build with actix-blog, sqlx and postgres. Manages users and blogs with their comments, simple. The development helped me to learn to use Domain Driven Development. "),e.qZA(),e.TgZ(14,"p"),e._uU(15," To deploy the servey I used docker and github workflows. The deploy is automatically pushed to the digitalocean droplet on each main branch push. "),e.qZA(),e.TgZ(16,"div",7)(17,"app-shadow-hover",8),e._UZ(18,"img",9),e.TgZ(19,"div",10),e._UZ(20,"app-github-src",11),e.TgZ(21,"a",12),e._UZ(22,"app-svg-icon",13),e.TgZ(23,"span",14),e._uU(24,"Site"),e.qZA()()()()(),e.TgZ(25,"footer",15),e._UZ(26,"app-github-src",11),e.TgZ(27,"a",12),e._UZ(28,"app-svg-icon",13),e.TgZ(29,"span",14),e._uU(30,"Site"),e.qZA()()()(),e.TgZ(31,"article",16)(32,"h1",5),e._uU(33,"Code Conjurer"),e.qZA(),e.TgZ(34,"h2",6),e._uU(35,"Template cli, january 2023"),e.qZA(),e.TgZ(36,"p"),e._uU(37,' "Code conjurer", also known as "cco", is a command line interface written in the programming language Rust. '),e.qZA(),e.TgZ(38,"p"),e._uU(39," Its purpose is to generate code files from a single template or a set of templates. The app includes a small template meta-language that allows for the creation of dynamic templates that can be customized with variable names and values. "),e.qZA(),e.TgZ(40,"footer"),e._UZ(41,"app-github-src",17),e.qZA()()())},dependencies:[r.ez,l.b,o.bf,o.dP,i.f,c.A],changeDetection:0})}}}]);